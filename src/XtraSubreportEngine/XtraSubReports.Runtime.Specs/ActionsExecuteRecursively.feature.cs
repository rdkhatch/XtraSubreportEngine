// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XtraSubReports.Runtime.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Actions")]
    public partial class ActionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ActionsExecuteRecursively.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Actions", "In order to have clean seperation bethween the report designer and the developer\r" +
                    "\nAs a developer\r\nI want to write .net actions which can be invoked at runtime", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change text on a label in a subreport")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ChangeTextOnALabelInASubreport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change text on a label in a subreport", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A report exists");
#line 9
 testRunner.And("the report has an XRLabel named ChangeMe in the header");
#line 10
 testRunner.And("ChangeMe\'s text property has a value of Brodie");
#line 11
 testRunner.And("the report has another XRLabel named DontChangeMe in header");
#line 12
 testRunner.And("DontChangeMe\'s text property has a value of GreenBayPackers");
#line 13
 testRunner.And("an action exists against an XRLabel named ChangeMe to change the name to Camp and" +
                    " increment a counter");
#line 14
 testRunner.And("the xtrasubreport engine is initialized");
#line 15
 testRunner.When("the report engine runs");
#line 16
 testRunner.Then("ChangeMe\'s text property should have a value of Camp");
#line 17
 testRunner.And("DontChangeMe\'s text property should have a value of GreenBayPackers");
#line 18
 testRunner.And("the counter incremented by the action should have a count of 1");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
